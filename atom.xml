<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>海底的🐟的个人博客</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/Marszxf0620.github.io/atom.xml" rel="self"/>
  
  <link href="https://Marszxf0620.github.io/Marszxf0620.github.io/"/>
  <updated>2020-02-12T06:52:33.341Z</updated>
  <id>https://Marszxf0620.github.io/Marszxf0620.github.io/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建hexo博客+配置到github上遇到的问题</title>
    <link href="https://Marszxf0620.github.io/Marszxf0620.github.io/Spring-Boot%20%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/"/>
    <id>https://Marszxf0620.github.io/Marszxf0620.github.io/Spring-Boot 自动配置原理/</id>
    <published>2020-02-09T16:00:00.000Z</published>
    <updated>2020-02-12T06:52:33.341Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、原理剖析："><a href="#1、原理剖析：" class="headerlink" title="1、原理剖析："></a><strong>1、原理剖析：</strong></h3><ul><li><strong>引言：</strong>Spring Boot关于自动配置的源码在<strong>spring-boot-autoconfigure-x.x.x.x.jar</strong> 中<br><img src="https://img-blog.csdnimg.cn/2020021214442219.png" alt="在这里插入图片描述"></li></ul><p>另外Spring-Boot的启动类上有一个<strong>@SpringBootApplication</strong>注解，这个注解是Spring Boot项目必不可少的注解。那么自动配置原理一定和这个注解有着千丝万缕的联系！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>    <span class="comment">//SpringBoot的启动类上面的总注解  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot02ConfigAutoconfigApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot02ConfigAutoconfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（1）</strong> Spring-Boot启动的时候加载主配置类；@SpringBootApplication 是一个复合注解；</p><pre><code>其中包含一个用于开启自动配置功能**@EnableAutoConfiguration**</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),<span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure><p><strong>（2）@EnableAutoConfiguration的作用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    <span class="comment">// @EnableAutoConfiguration注解中导入AutoConfigurationImportSelector类</span></span><br></pre></td></tr></table></figure><p>而这个注解也是一个派生注解;</p><p>其中的关键功能由 *<em>@Import *</em>提供，其导入的AutoConfigurationImportSelector的 ==selectImports()== 方法</p><ul><li>通过==SpringFactoriesLoader.loadFactoryNames()==  <strong>扫描</strong> 所有具有<strong>META-INF/spring.factories</strong> 的jar 包。</li></ul><p>（spring-boot-autoconfigure-x.x.x.x.jar里就有一个这样的spring.factories文件）</p><p><img src="https://img-blog.csdnimg.cn/20200212144639567.png" alt="在这里插入图片描述"></p><ul><li><p>其中 <strong>loadFactoryNames()</strong> 方法：把扫描到的文件内容包装成 <strong>properties 对象</strong></p></li><li><p>继而从 <strong>properties **中获取到</strong>EnableAutoConfiguration.class**类（类名）对应的值，添加到容器中；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Enumeration&lt;URL&gt; urls = classLoader != <span class="keyword">null</span> ?</span><br><span class="line">classLoader.getResources(<span class="string">"META-INF/spring.factories"</span>) : ClassLoader.getSystemResources(<span class="string">"META-INF/spring.factories"</span>);</span><br><span class="line"><span class="comment">//扫描到的文件内容包装成properties对象</span></span><br><span class="line">Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br></pre></td></tr></table></figure></li></ul><p>（下图是<strong>META-INF/spring.factories</strong> 中的<strong>EnableAutoConfiguration</strong>对应的值）<br><img src="https://img-blog.csdnimg.cn/20200212144740196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0OTMwOTUx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>总结：</strong></p><p>==@EnableAutoConfiguration 这个注解通过 @SpringBootApplication 被间接的标记在了Spring Boot的启动类上。在SpringApplication.run(…)的内部就会执行selectImports()方法，扫描所有具有 META/INF/spring.factories的jar 包中的 自动配置类（xxxAutoConfiguration）的全限定名对应的class，然后将所有自动配置类加载到Spring容器中。用他们来做自动配置；==</p><p><strong>（3）</strong> 一个自动配置类的功能：</p><ul><li>以  <strong>HttpEncodingAutoConfiguration</strong> （==HTTP编码的自动配置==）为例解释自动配置原理：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.表示这是一个配置类</span></span><br><span class="line">@Configuration(proxyBeanMetho## 标题ds = false)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.启用指定类的 ConfigurationProperties功能，</span></span><br><span class="line"><span class="comment">//  将配置文件中对应的值 和 HttpProperties对应起来,并把 HttpProperties 加入到IOC容器中；</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HttpProperties.class)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.Spring底层的 @Conditional 注解：根据不同的条件，来判断某个类中的配置是否生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.1 判断当前应用是否是web应用，如果是，就生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = ConditionalOnWebApplication.Type.SERVLET)</span><br><span class="line"><span class="comment">//3.2 判断当前项目有没有这个 CharacterEncodingFilter类(SpringMVC中乱码解决的拦截器)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(CharacterEncodingFilter.class)</span><br><span class="line"><span class="comment">//3.3 判断配置文件中是否存在某个配置：spring.http.encoding.enable = true (false)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.http.encoding"</span>, value = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>)<span class="comment">//如果没有，也判定为成立；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//它已经和一个SpringBoot的配置文件映射了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpProperties.Encoding properties;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中获取；</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpProperties properties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span>  <span class="comment">//给容器中添加一个组件，这个组件的某些值要从properties中获取</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line"><span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>根据不同的条件判断，决定这个类是否生效？</strong></p><p><strong>一但这个配置类生效，这个配置类就会给容器添加各种组件；这些组件的属性是从对应的xxxProperties类中获取的，而这个类中的每一个属性又是和配置文件绑定的；</strong></p><ul><li>所有在配置文件中能 配置的属性 ( <strong>如server.port</strong>  )都是在xxxProperties类中封装着；</li><li>配置文件能配置什么就参照每个这样的类中的属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从配置文件中 获取指定的值 和 bean的属性进行绑定</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.http"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpProperties</span> </span>&#123;...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Encoding</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = StandardCharsets.UTF_8;</span><br><span class="line"><span class="keyword">private</span> Charset charset = DEFAULT_CHARSET;</span><br><span class="line"><span class="keyword">private</span> Boolean force;</span><br><span class="line"><span class="keyword">private</span> Boolean forceRequest;</span><br><span class="line"><span class="keyword">private</span> Boolean forceResponse;</span><br><span class="line"><span class="keyword">private</span> Map&lt;Locale, Charset&gt; mapping;&#125;</span><br></pre></td></tr></table></figure><p>==<strong>精髓：</strong>==</p><p>1、SpringBoot启动会加载大量的自动配置类</p><p>2、我们看我们需要的功能有没有SpringBoot 默认写好的得自动配置类</p><p>3、我们再来看这个自动配置类配置了哪些组件，只有需要的有，就不用了再来配置</p><p>4、给容器中自动配置类添加组件的时候，会从xxxProperties类中获取某些属性，我们就可以在配置文件中指定这      些属性的值</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、原理剖析：&quot;&gt;&lt;a href=&quot;#1、原理剖析：&quot; class=&quot;headerlink&quot; title=&quot;1、原理剖析：&quot;&gt;&lt;/a&gt;&lt;strong&gt;1、原理剖析：&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;引言：&lt;/strong&gt;Spring 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【jersey跨服务器上报错】com.sun.jersey.api.client.UniformInterfaceExceptionr：status of 403.md</title>
    <link href="https://Marszxf0620.github.io/Marszxf0620.github.io/%E3%80%90jersey%E8%B7%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%8A%A5%E9%94%99%E3%80%91com.sun.jersey.api.client.UniformInterfaceExceptionr%EF%BC%9Astatus%20of%20403/"/>
    <id>https://Marszxf0620.github.io/Marszxf0620.github.io/【jersey跨服务器上报错】com.sun.jersey.api.client.UniformInterfaceExceptionr：status of 403/</id>
    <published>2020-02-04T16:00:00.000Z</published>
    <updated>2020-02-05T13:38:27.195Z</updated>
    
    <content type="html"><![CDATA[<p>其实tomcat默认的情况下是过滤到静态资源的上传的，所以需要我们手动的设置一下！</p><ol><li><p>打开你的tomcat的安装的路径，点击conf,找到web.xml打开，然后找到DefaultServlet<br>找到这个位置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;<span class="keyword">default</span>&lt;<span class="regexp">/servlet-name&gt;</span></span><br><span class="line"><span class="regexp">    &lt;servlet-class&gt;org.apache.catalina.servlets.DefaultServlet&lt;/</span>servlet-<span class="class"><span class="keyword">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">debug</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">value</span>&gt;0&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">listings</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">false</span>&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;1&lt;/<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>tomcat默认情况下是只读的，如果我们要往里边上传东西，是要将只读改为false的，加上下面的代码就可以了！</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">init-param</span>&gt;</span><br><span class="line">        &lt;param-name&gt;readonly&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class="line">     &lt;/init-param&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>最后的结果</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  &lt;<span class="selector-tag">servlet</span>&gt;</span><br><span class="line">      &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">      &lt;servlet-class&gt;org.apache.catalina.servlets.DefaultServlet&lt;/servlet-class&gt;</span><br><span class="line">      &lt;<span class="selector-tag">init-param</span>&gt;</span><br><span class="line">          &lt;param-name&gt;debug&lt;/param-name&gt;</span><br><span class="line">          &lt;param-value&gt;0&lt;/param-value&gt;</span><br><span class="line">      &lt;/init-param&gt;</span><br><span class="line">      &lt;<span class="selector-tag">init-param</span>&gt;</span><br><span class="line">          &lt;param-name&gt;listings&lt;/param-name&gt;</span><br><span class="line">          &lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class="line">      &lt;/init-param&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">init-param</span>&gt;</span><br><span class="line">      &lt;param-name&gt;readonly&lt;/param-name&gt;</span><br><span class="line">      &lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class="line">     &lt;/init-param&gt;</span><br><span class="line"></span><br><span class="line">      &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br></pre></td></tr></table></figure><p>这样再重新部署服务器，就可以完成跨服务器的文件上传！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实tomcat默认的情况下是过滤到静态资源的上传的，所以需要我们手动的设置一下！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开你的tomcat的安装的路径，点击conf,找到web.xml打开，然后找到DefaultServlet&lt;br&gt;找到这个位置：&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建hexo博客+配置到github上遇到的问题</title>
    <link href="https://Marszxf0620.github.io/Marszxf0620.github.io/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%20+%20%E9%85%8D%E7%BD%AE%E5%88%B0github%E4%B8%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://Marszxf0620.github.io/Marszxf0620.github.io/搭建hexo博客 + 配置到github上遇到的问题/</id>
    <published>2019-07-05T08:56:48.000Z</published>
    <updated>2019-07-06T04:53:07.337Z</updated>
    
    <content type="html"><![CDATA[<hr><p>主要问题</p><ol><li><p>hexo d 没有反应,报错等</p></li><li><p>配置到github后出现空白页</p></li></ol><hr><p>解决方案：<br> 问题 1 和问题 2 出现的原因主要是：<br> 在设置_config.yml文件的时候，每一个：后界面是要有一个空格的。   例如：  <strong>theme: next</strong></p><hr><p>回顾一下整个搭建过程</p><ol><li>安装git</li><li>安装hexo</li><li>新建一个Blog文件夹，在文件夹中右键 Git Bash here</li><li>进入命令行，一系列配置，然后hexo s 本地配置 可以使用 http:localhost:4000 来进行本地访问。然后是 hexo clean ; hexo g ;hexo d 把博客配置到远端（github）</li><li>最后购买域名，在github中设置域名以将xxx.github.io 与 <a href="http://www.xxx.com（自己购买的域名进行对接）。" target="_blank" rel="noopener">www.xxx.com（自己购买的域名进行对接）。</a></li><li>然后可以用<a href="http://www.xxx.com进行访问，后续可以在文件Blog" target="_blank" rel="noopener">www.xxx.com进行访问，后续可以在文件Blog</a> 和theme 的_config.yml文件中对博客进行基本设置。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;主要问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;hexo d 没有反应,报错等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置到github后出现空白页&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;解决方案：&lt;br&gt; 问题 1 和问题 2 出现的原因主要是：&lt;br&gt; 在设置
      
    
    </summary>
    
    
  </entry>
  
</feed>
